# This viminfo file was generated by Vim 8.1.
# You may edit it if you're careful!

# Viminfo version
|1,4

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~h
# Last Search Pattern:
~MSle0~/\V\<vG\>

# Last Substitute String:
$

# Command Line History (newest to oldest):
:wq
|2,0,1725690222,,"wq"
:q
|2,0,1725528252,,"q"
:%!xxd -r
|2,0,1725242325,,"%!xxd -r"
:%!xxd
|2,0,1725242306,,"%!xxd"
:wq!
|2,0,1725242151,,"wq!"
:'<,'>wq
|2,0,1725240425,,"'<,'>wq"

# Search String History (newest to oldest):
? @$
|2,1,1725526036,,"@$"

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Debug Line History (newest to oldest):

# Registers:
"0	LINE	0
	    free(hand
|3,0,0,1,1,0,1725526036,"    free(hand"
""1	CHAR	0
	#include <stddef.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  // Check command line arguments/report errors
	  if (argc < 2 || argc > 3) {
	    fprintf(stderr, "Usage: ./poker input_file [trials]\n");
	    return EXIT_FAILURE;
	  }
	  int num_trials = 10000;
	  if (argc == 3) {
	    num_trials = atoi(argv[2]);
	    if (num_trials <= 0) {
	        fprintf(stderr, "trials must be a positive number.");
	        return EXIT_FAILURE;
	    }
	  }
	
	  // Open the input file and read the hands in it
	  FILE *f = fopen(argv[1], "r");
	  if (f == NULL) {
	    perror("could not open file");
	    return EXIT_FAILURE;
	  }
	  deck_t ** hands;
	  size_t n_hands;
	  future_cards_t fc;
	  fc.decks = NULL;
	  fc.n_decks = 0;
	  hands = read_input(f, &n_hands, &fc);
	  assert(n_hands >= 2);
	  /* Create a deck with the remaining cards */
	  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);
	
	  /* Create an array to count how many times each hand
	   * wins, with one more element for if there was a tie
	   */
	  unsigned int counts[n_hands + 1];
	  for (size_t i = 0; i < n_hands + 1; i++) {
	    counts[i] = 0;
|3,1,1,0,50,0,1725690214,"#include <stddef.h>","#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  // Check command line arguments/report errors","  if (argc < 2 || argc > 3) {","    fprintf(stderr, \"Usage: ./poker input_file [trials]\\n\");",>26
|<"    return EXIT_FAILURE;","  }","  int num_trials = 10000;","  if (argc == 3) {","    num_trials = atoi(argv[2]);","    if (num_trials <= 0) {","        fprintf(stderr, \"trials must be a positive number.\");","        return EXIT_FAILURE;","    }","  }","","  // Open the input file and read the hands in it","  FILE *f = fopen(argv[1], \"r\");","  if (f == NULL) {","    perror(\"could not open file\");","    return EXIT_FAILURE;","  }","  deck_t ** hands;","  size_t n_hands;",>22
|<"  future_cards_t fc;","  fc.decks = NULL;","  fc.n_decks = 0;","  hands = read_input(f, &n_hands, &fc);","  assert(n_hands >= 2);","  /* Create a deck with the remaining cards */","  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);","","  /* Create an array to count how many times each hand","   * wins, with one more element for if there was a tie","   */","  unsigned int counts[n_hands + 1];","  for (size_t i = 0; i < n_hands + 1; i++) {","    counts[i] = 0;"
"2	CHAR	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	
	int card_ptr_comp(const void *vp1, const void *vp2) {
	    const card_t *const *cp1 = vp1;
	    const card_t *const *cp2 = vp2;
	    if ((*cp1)->value > (*cp2)->value) {
	        return -1;
	    } else if ((*cp1)->value < (*cp2)->value) {
	        return 1;
	    } else {
	        if ((*cp1)->suit > (*cp2)->suit) {
	            return -1;
	        } else if ((*cp1)->suit < (*cp2)->suit) {
	            return 1;
	        } else {
	            return 0;
	        }
	    }
	    return 0;
	}
	
	suit_t flush_suit(deck_t *hand) {
	    unsigned suit_count[NUM_SUITS] = {0};
	    for (int i = 0; i < hand->n_cards; i++) {
	        suit_count[hand->cards[i]->suit]++;
	    }
	    for (int i = 0; i < NUM_SUITS; i++) {
	        if (suit_count[i] >= 5) {
	            return i;
	        }
	    }
	    return NUM_SUITS;
	}
	
	unsigned get_largest_element(unsigned *arr, size_t n) {
	    unsigned max = arr[0];
	    for (int i = 0; i < n; i++) {
	        if (arr[i] > max) {
	            max = arr[i];
	        }
	    }
	    return max;
	}
	
	size_t get_match_index(unsigned *match_counts, size_t n, unsigned n_of_akind) {
	    for (int i = 0; i < n; i++) {
	        if (match_counts[i] == n_of_akind) {
	            return i;
|3,0,2,0,50,0,1725529052,"#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","","int card_ptr_comp(const void *vp1, const void *vp2) {","    const card_t *const *cp1 = vp1;","    const card_t *const *cp2 = vp2;","    if ((*cp1)->value > (*cp2)->value) {","        return -1;","    } else if ((*cp1)->value < (*cp2)->value) {","        return 1;","    } else {","        if ((*cp1)->suit > (*cp2)->suit) {","            return -1;",>51
|<"        } else if ((*cp1)->suit < (*cp2)->suit) {","            return 1;","        } else {","            return 0;","        }","    }","    return 0;","}","","suit_t flush_suit(deck_t *hand) {","    unsigned suit_count[NUM_SUITS] = {0};","    for (int i = 0; i < hand->n_cards; i++) {","        suit_count[hand->cards[i]->suit]++;","    }","    for (int i = 0; i < NUM_SUITS; i++) {","        if (suit_count[i] >= 5) {","            return i;","        }","    }",>23
|<"    return NUM_SUITS;","}","","unsigned get_largest_element(unsigned *arr, size_t n) {","    unsigned max = arr[0];","    for (int i = 0; i < n; i++) {","        if (arr[i] > max) {","            max = arr[i];","        }","    }","    return max;","}","","size_t get_match_index(unsigned *match_counts, size_t n, unsigned n_of_akind) {","    for (int i = 0; i < n; i++) {","        if (match_counts[i] == n_of_akind) {","            return i;"
"3	CHAR	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  //YOUR CODE GOES HERE
	  if(argc < 2){
	    fprintf(stderr, "Usage: %s <inputfile>\n", argv[0]);
	    return EXIT_FAILURE;
	  }
	    FILE * f = fopen(argv[1], "r");
	    if(f == NULL){
	      fprintf(stderr, "Could not open file %s\n", argv[1]);
	      return EXIT_FAILURE;
	    }
	    int num_trials = 1000;
	    if(argc ==3){
	         num_trials = atoi(argv[2]);
	    }
	
	    future_cards_t * fc = malloc(sizeof(*fc));
	    fc->decks = NULL;
	    fc->n_decks = 0;
	    size_t n_hands = 0;
	    deck_t ** hands = read_input(f, &n_hands, fc);
	    deck_t * deck = build_remaining_deck(hands, n_hands);
	    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));
	    for(int i = 0; i < n_hands+1; i++){
	      wins[i] = 0;
	    }
	    for(int i = 0; i < num_trials; i++) {
	        shuffle(deck);
	        future_cards_from_deck(deck, fc);
	        int winner = 0;
	        int tie = 0;
	        for (size_t j = 1; j < n_hands; j++) {
	            if (compare_hands(hands[j], hands[winner]) > 0) {
	                winner = j;
	                tie = 0;
	            } else if (compare_hands(hands[j], hands[winner]) == 0) {
	                tie = 1;
	            }
|3,0,3,0,50,0,1725528558,"#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  //YOUR CODE GOES HERE","  if(argc < 2){","    fprintf(stderr, \"Usage: %s <inputfile>\\n\", argv[0]);","    return EXIT_FAILURE;","  }","    FILE * f = fopen(argv[1], \"r\");",>20
|<"    if(f == NULL){","      fprintf(stderr, \"Could not open file %s\\n\", argv[1]);","      return EXIT_FAILURE;","    }","    int num_trials = 1000;","    if(argc ==3){","         num_trials = atoi(argv[2]);","    }","","    future_cards_t * fc = malloc(sizeof(*fc));","    fc->decks = NULL;","    fc->n_decks = 0;","    size_t n_hands = 0;","    deck_t ** hands = read_input(f, &n_hands, fc);","    deck_t * deck = build_remaining_deck(hands, n_hands);",>58
|<"    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));","    for(int i = 0; i < n_hands+1; i++){","      wins[i] = 0;","    }","    for(int i = 0; i < num_trials; i++) {","        shuffle(deck);","        future_cards_from_deck(deck, fc);","        int winner = 0;","        int tie = 0;","        for (size_t j = 1; j < n_hands; j++) {","            if (compare_hands(hands[j], hands[winner]) > 0) {","                winner = j;","                tie = 0;",>71
|<"            } else if (compare_hands(hands[j], hands[winner]) == 0) {","                tie = 1;","            }"
"4	CHAR	0
	#include <stddef.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  // Check command line arguments/report errors
	  if (argc < 2 || argc > 3) {
	    fprintf(stderr, "Usage: ./poker input_file [trials]\n");
	    return EXIT_FAILURE;
	  }
	  int num_trials = 10000;
	  if (argc == 3) {
	    num_trials = atoi(argv[2]);
	    if (num_trials <= 0) {
	        fprintf(stderr, "trials must be a positive number.");
	        return EXIT_FAILURE;
	    }
	  }
	
	  // Open the input file and read the hands in it
	  FILE *f = fopen(argv[1], "r");
	  if (f == NULL) {
	    perror("could not open file");
	    return EXIT_FAILURE;
	  }
	  deck_t ** hands;
	  size_t n_hands;
	  future_cards_t fc;
	  fc.decks = NULL;
	  fc.n_decks = 0;
	  hands = read_input(f, &n_hands, &fc);
	  assert(n_hands >= 2);
	  /* Create a deck with the remaining cards */
	  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);
	
	  /* Create an array to count how many times each hand
	   * wins, with one more element for if there was a tie
	   */
	  unsigned int counts[n_hands + 1];
	  for (size_t i = 0; i < n_hands + 1; i++) {
	    counts[i] = 0;
|3,0,4,0,50,0,1725528383,"#include <stddef.h>","#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  // Check command line arguments/report errors","  if (argc < 2 || argc > 3) {","    fprintf(stderr, \"Usage: ./poker input_file [trials]\\n\");",>26
|<"    return EXIT_FAILURE;","  }","  int num_trials = 10000;","  if (argc == 3) {","    num_trials = atoi(argv[2]);","    if (num_trials <= 0) {","        fprintf(stderr, \"trials must be a positive number.\");","        return EXIT_FAILURE;","    }","  }","","  // Open the input file and read the hands in it","  FILE *f = fopen(argv[1], \"r\");","  if (f == NULL) {","    perror(\"could not open file\");","    return EXIT_FAILURE;","  }","  deck_t ** hands;","  size_t n_hands;",>22
|<"  future_cards_t fc;","  fc.decks = NULL;","  fc.n_decks = 0;","  hands = read_input(f, &n_hands, &fc);","  assert(n_hands >= 2);","  /* Create a deck with the remaining cards */","  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);","","  /* Create an array to count how many times each hand","   * wins, with one more element for if there was a tie","   */","  unsigned int counts[n_hands + 1];","  for (size_t i = 0; i < n_hands + 1; i++) {","    counts[i] = 0;"
"5	CHAR	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  //YOUR CODE GOES HERE
	  if(argc < 2){
	    fprintf(stderr, "Usage: %s <inputfile>\n", argv[0]);
	    return EXIT_FAILURE;
	  }
	    FILE * f = fopen(argv[1], "r");
	    if(f == NULL){
	      fprintf(stderr, "Could not open file %s\n", argv[1]);
	      return EXIT_FAILURE;
	    }
	    int num_trials = 1;
	    if(argc ==3){
	         num_trials = atoi(argv[2]);
	    }
	
	    future_cards_t * fc = malloc(sizeof(*fc));
	    fc->decks = NULL;
	    fc->n_decks = 0;
	    size_t n_hands = 0;
	    deck_t ** hands = read_input(f, &n_hands, fc);
	    deck_t * deck = build_remaining_deck(hands, n_hands);
	    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));
	    for(int i = 0; i < n_hands+1; i++){
	      wins[i] = 0;
	    }
	    for(int i = 0; i < num_trials; i++) {
	        shuffle(deck);
	        future_cards_from_deck(deck, fc);
	        int winner = 0;
	        int tie = 0;
	        for (int j = 1; j < n_hands; j++) {
	            if (compare_hands(hands[j], hands[winner]) > 0) {
	                winner = j;
	                tie = 0;
	            } else if (compare_hands(hands[j], hands[winner]) == 0) {
	                tie = 1;
	            }
|3,0,5,0,50,0,1725528334,"#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  //YOUR CODE GOES HERE","  if(argc < 2){","    fprintf(stderr, \"Usage: %s <inputfile>\\n\", argv[0]);","    return EXIT_FAILURE;","  }","    FILE * f = fopen(argv[1], \"r\");",>20
|<"    if(f == NULL){","      fprintf(stderr, \"Could not open file %s\\n\", argv[1]);","      return EXIT_FAILURE;","    }","    int num_trials = 1;","    if(argc ==3){","         num_trials = atoi(argv[2]);","    }","","    future_cards_t * fc = malloc(sizeof(*fc));","    fc->decks = NULL;","    fc->n_decks = 0;","    size_t n_hands = 0;","    deck_t ** hands = read_input(f, &n_hands, fc);","    deck_t * deck = build_remaining_deck(hands, n_hands);",>58
|<"    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));","    for(int i = 0; i < n_hands+1; i++){","      wins[i] = 0;","    }","    for(int i = 0; i < num_trials; i++) {","        shuffle(deck);","        future_cards_from_deck(deck, fc);","        int winner = 0;","        int tie = 0;","        for (int j = 1; j < n_hands; j++) {","            if (compare_hands(hands[j], hands[winner]) > 0) {","                winner = j;","                tie = 0;",>71
|<"            } else if (compare_hands(hands[j], hands[winner]) == 0) {","                tie = 1;","            }"
"6	CHAR	0
	#include <stddef.h>
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  // Check command line arguments/report errors
	  if (argc < 2 || argc > 3) {
	    fprintf(stderr, "Usage: ./poker input_file [trials]\n");
	    return EXIT_FAILURE;
	  }
	  int num_trials = 1;
	  if (argc == 3) {
	    num_trials = atoi(argv[2]);
	    if (num_trials <= 0) {
	        fprintf(stderr, "trials must be a positive number.");
	        return EXIT_FAILURE;
	    }
	  }
	
	  // Open the input file and read the hands in it
	  FILE *f = fopen(argv[1], "r");
	  if (f == NULL) {
	    perror("could not open file");
	    return EXIT_FAILURE;
	  }
	  deck_t ** hands;
	  size_t n_hands;
	  future_cards_t fc;
	  fc.decks = NULL;
	  fc.n_decks = 0;
	  hands = read_input(f, &n_hands, &fc);
	  assert(n_hands >= 2);
	  /* Create a deck with the remaining cards */
	  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);
	
	  /* Create an array to count how many times each hand
	   * wins, with one more element for if there was a tie
	   */
	  unsigned int counts[n_hands + 1];
	  for (size_t i = 0; i < n_hands + 1; i++) {
	    counts[i] = 0;
|3,0,6,0,50,0,1725527602,"#include <stddef.h>","#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  // Check command line arguments/report errors","  if (argc < 2 || argc > 3) {","    fprintf(stderr, \"Usage: ./poker input_file [trials]\\n\");",>26
|<"    return EXIT_FAILURE;","  }","  int num_trials = 1;","  if (argc == 3) {","    num_trials = atoi(argv[2]);","    if (num_trials <= 0) {","        fprintf(stderr, \"trials must be a positive number.\");","        return EXIT_FAILURE;","    }","  }","","  // Open the input file and read the hands in it","  FILE *f = fopen(argv[1], \"r\");","  if (f == NULL) {","    perror(\"could not open file\");","    return EXIT_FAILURE;","  }","  deck_t ** hands;","  size_t n_hands;",>22
|<"  future_cards_t fc;","  fc.decks = NULL;","  fc.n_decks = 0;","  hands = read_input(f, &n_hands, &fc);","  assert(n_hands >= 2);","  /* Create a deck with the remaining cards */","  deck_t *remaining_deck = build_remaining_deck(hands, n_hands);","","  /* Create an array to count how many times each hand","   * wins, with one more element for if there was a tie","   */","  unsigned int counts[n_hands + 1];","  for (size_t i = 0; i < n_hands + 1; i++) {","    counts[i] = 0;"
"7	CHAR	0
	#include <stdio.h>
	#include <stdlib.h>
	#include <assert.h>
	#include <ctype.h>
	#include "cards.h"
	#include "deck.h"
	#include "eval.h"
	#include "future.h"
	#include "input.h"
	
	
	
	int main(int argc, char ** argv) {
	  //YOUR CODE GOES HERE
	  if(argc < 2){
	    fprintf(stderr, "Usage: %s <inputfile>\n", argv[0]);
	    return EXIT_FAILURE;
	  }
	    FILE * f = fopen(argv[1], "r");
	    if(f == NULL){
	      fprintf(stderr, "Could not open file %s\n", argv[1]);
	      return EXIT_FAILURE;
	    }
	    int num_trials = 10000;
	    if(argc ==3){
	         num_trials = atoi(argv[2]);
	    }
	    
	    future_cards_t * fc = malloc(sizeof(*fc));
	    fc->decks = NULL;
	    fc->n_decks = 0;
	    size_t n_hands = 0;
	    deck_t ** hands = read_input(f, &n_hands, fc);
	    deck_t * deck = build_remaining_deck(hands, n_hands);
	    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));
	    for(int i = 0; i < n_hands+1; i++){
	      wins[i] = 0;
	    }
	    for(int i = 0; i < num_trials; i++) {
	        shuffle(deck);
	        future_cards_from_deck(deck, fc);
	        int winner = 0;
	        int tie = 0;
	        for (int j = 1; j < n_hands; j++) {
	            if (compare_hands(hands[j], hands[winner]) > 0) {
	                winner = j;
	                tie = 0;
	            } else if (compare_hands(hands[j], hands[winner]) == 0) {
	                tie = 1;
	            }
|3,0,7,0,50,0,1725527551,"#include <stdio.h>","#include <stdlib.h>","#include <assert.h>","#include <ctype.h>","#include \"cards.h\"","#include \"deck.h\"","#include \"eval.h\"","#include \"future.h\"","#include \"input.h\"","","","","int main(int argc, char ** argv) {","  //YOUR CODE GOES HERE","  if(argc < 2){","    fprintf(stderr, \"Usage: %s <inputfile>\\n\", argv[0]);","    return EXIT_FAILURE;","  }","    FILE * f = fopen(argv[1], \"r\");",>20
|<"    if(f == NULL){","      fprintf(stderr, \"Could not open file %s\\n\", argv[1]);","      return EXIT_FAILURE;","    }","    int num_trials = 10000;","    if(argc ==3){","         num_trials = atoi(argv[2]);","    }","    ","    future_cards_t * fc = malloc(sizeof(*fc));","    fc->decks = NULL;","    fc->n_decks = 0;","    size_t n_hands = 0;","    deck_t ** hands = read_input(f, &n_hands, fc);","    deck_t * deck = build_remaining_deck(hands, n_hands);",>58
|<"    unsigned * wins = malloc((n_hands+1)*sizeof(*wins));","    for(int i = 0; i < n_hands+1; i++){","      wins[i] = 0;","    }","    for(int i = 0; i < num_trials; i++) {","        shuffle(deck);","        future_cards_from_deck(deck, fc);","        int winner = 0;","        int tie = 0;","        for (int j = 1; j < n_hands; j++) {","            if (compare_hands(hands[j], hands[winner]) > 0) {","                winner = j;","                tie = 0;",>71
|<"            } else if (compare_hands(hands[j], hands[winner]) == 0) {","                tie = 1;","            }"
"8	CHAR	0
	  for(size_t i = 0; i < fc.n_decks; i++) {
	    free((fc.decks)[i].cards);
	  }
	  free(fc.decks);
	
	  for(size_t i = 0; i < n_hands; i++) {
	    free_deck(hands[i]);
	  }
	  free(hands);
	
	  free_deck(remaining_deck);
	
	  if (fclose(f)) {
	    perror("could not close file");
	    return EXIT_FAILURE;
	  }
|3,0,8,0,16,0,1725527304,"  for(size_t i = 0; i < fc.n_decks; i++) {","    free((fc.decks)[i].cards);","  }","  free(fc.decks);","","  for(size_t i = 0; i < n_hands; i++) {","    free_deck(hands[i]);","  }","  free(hands);","","  free_deck(remaining_deck);","","  if (fclose(f)) {","    perror(\"could not close file\");","    return EXIT_FAILURE;","  }"
"9	CHAR	0
	fclose(f);
	    free(fc);
	    for(int i = 0; i < n_hands; i++){
	      free_deck(hands[i]);
	    }
	    free(hands);
	    free_deck(deck);
	    free(wins);
	
|3,0,9,0,9,0,1725527248,"fclose(f);","    free(fc);","    for(int i = 0; i < n_hands; i++){","      free_deck(hands[i]);","    }","    free(hands);","    free_deck(deck);","    free(wins);",""
"-	CHAR	0
	0
|3,0,36,0,1,0,1725528456,"0"

# File marks:
'0  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,48,74,0,1725690222,"~/learn2prog/c4prj3_finish/main.c"
'1  29  0  ~/learn2prog/and_beyond/README
|4,49,29,0,1725529260,"~/learn2prog/and_beyond/README"
'2  285  0  ~/learn2prog/c3prj2_eval/eval.c
|4,50,285,0,1725529057,"~/learn2prog/c3prj2_eval/eval.c"
'3  1  24  ~/learn2prog/c4prj3_finish/main.c
|4,51,1,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
'4  20  24  ~/learn2prog/c4prj3_finish/main.c
|4,52,20,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
'5  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,53,1,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
'6  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,54,1,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
'7  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,55,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
'8  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,56,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
'9  1  25  ~/learn2prog/c4prj3_finish/main.c
|4,57,1,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"

# Jumplist (newest first):
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725690222,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725690213,"~/learn2prog/c4prj3_finish/main.c"
-'  29  0  ~/learn2prog/and_beyond/README
|4,39,29,0,1725529260,"~/learn2prog/and_beyond/README"
-'  29  0  ~/learn2prog/and_beyond/README
|4,39,29,0,1725529260,"~/learn2prog/and_beyond/README"
-'  1  0  ~/learn2prog/and_beyond/README
|4,39,1,0,1725529201,"~/learn2prog/and_beyond/README"
-'  1  0  ~/learn2prog/and_beyond/README
|4,39,1,0,1725529201,"~/learn2prog/and_beyond/README"
-'  285  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,285,0,1725529057,"~/learn2prog/c3prj2_eval/eval.c"
-'  285  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,285,0,1725529057,"~/learn2prog/c3prj2_eval/eval.c"
-'  285  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,285,0,1725529057,"~/learn2prog/c3prj2_eval/eval.c"
-'  285  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,285,0,1725529057,"~/learn2prog/c3prj2_eval/eval.c"
-'  1  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,1,0,1725529051,"~/learn2prog/c3prj2_eval/eval.c"
-'  1  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,1,0,1725529051,"~/learn2prog/c3prj2_eval/eval.c"
-'  1  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,1,0,1725529051,"~/learn2prog/c3prj2_eval/eval.c"
-'  1  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,1,0,1725529051,"~/learn2prog/c3prj2_eval/eval.c"
-'  2  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,2,0,1725529050,"~/learn2prog/c3prj2_eval/eval.c"
-'  2  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,2,0,1725529050,"~/learn2prog/c3prj2_eval/eval.c"
-'  2  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,2,0,1725529050,"~/learn2prog/c3prj2_eval/eval.c"
-'  2  0  ~/learn2prog/c3prj2_eval/eval.c
|4,39,2,0,1725529050,"~/learn2prog/c3prj2_eval/eval.c"
-'  20  24  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
-'  20  24  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
-'  20  24  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
-'  20  24  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,24,1725528705,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528694,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528694,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528694,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528694,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528564,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528557,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  24  25  ~/learn2prog/c4prj3_finish/main.c
|4,39,24,25,1725528459,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528449,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528400,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528400,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528400,"~/learn2prog/c4prj3_finish/main.c"
-'  52  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,52,0,1725528400,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  74  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,74,0,1725528388,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  1  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,1,0,1725528383,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  20  23  ~/learn2prog/c4prj3_finish/main.c
|4,39,20,23,1725528352,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  111  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,111,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"
-'  38  0  ~/learn2prog/c4prj3_finish/main.c
|4,39,38,0,1725528340,"~/learn2prog/c4prj3_finish/main.c"

# History of marks within files (newest to oldest):

> ~/learn2prog/c4prj3_finish/main.c
	*	1725690221	0
	"	74	0
	^	74	0
	.	73	1
	+	1	0
	+	1	1
	+	1	21
	+	1	34
	+	1	8
	+	1	21
	+	1	0
	+	1	4
	+	1	0
	+	1	18
	+	1	4
	+	1	91
	+	1	0
	+	1	4
	+	1	2
	+	1	0
	+	1	14
	+	1	0
	+	1	1
	+	1	0
	+	1	1
	+	1	22
	+	1	0
	+	1	1
	+	1	23
	+	1	0
	+	1	1
	+	1	25
	+	1	0
	+	1	1
	+	1	23
	+	2	0
	+	73	1

> ~/learn2prog/and_beyond/README
	*	1725529258	0
	"	29	0

> ~/learn2prog/c3prj2_eval/eval.c
	*	1725529056	0
	"	285	0
	^	285	0
	.	284	0
	+	2	1
	+	2	0
	+	2	4
	+	2	9
	+	2	11
	+	2	23
	+	2	1
	+	2	14
	+	2	0
	+	2	15
	+	2	0
	+	2	26
	+	2	6
	+	2	14
	+	2	16
	+	2	29
	+	2	79
	+	2	13
	+	2	63
	+	2	68
	+	2	0
	+	2	11
	+	2	0
	+	2	6
	+	2	8
	+	2	9
	+	2	0
	+	2	19
	+	2	0
	+	2	13
	+	2	0
	+	2	11
	+	2	0
	+	2	12
	+	2	0
	+	2	24
	+	2	35
	+	2	19
	+	2	29
	+	2	19
	+	2	26
	+	2	43
	+	2	80
	+	2	0
	+	2	1
	+	3	0
	+	284	0

> ~/learn2prog/c4prj3_finish/main.
	*	1725528251	0
	"	1	0

> ~/learn2prog/c4prj3_finish/provided-tests/answers.txt
	*	1725526953	0
	"	1	0

> ~/learn2prog/c4prj3_finish/README
	*	1725525123	0
	"	86	2

> ~/learn2prog/c4prj2_input/input.c
	*	1725525018	0
	"	74	0
	^	74	0
	.	73	0
	+	1	1
	+	1	0
	+	1	1
	+	1	0
	+	1	1
	+	1	9
	+	1	0
	+	1	33
	+	1	38
	+	1	12
	+	1	36
	+	1	0
	+	1	19
	+	1	0
	+	1	5
	+	1	29
	+	1	0
	+	1	3
	+	1	0
	+	1	39
	+	1	18
	+	1	28
	+	1	0
	+	1	35
	+	1	11
	+	1	17
	+	1	0
	+	1	26
	+	1	0
	+	2	0
	+	73	0

> ~/learn2prog/c4prj2_input/input.t
	*	1725524758	0
	"	1	0

> ~/learn2prog/c4prj2_input/input.d
	*	1725524372	0
	"	1	0

> ~/learn2prog/c4prj2_input/future.c
	*	1725523621	0
	"	36	0
	^	35	3
	.	35	2
	+	1	0
	+	1	6
	+	1	17
	+	1	0
	+	2	0
	+	36	0
	+	4	4
	+	21	18
	+	22	0
	+	21	62
	+	21	4
	+	21	38
	+	22	0
	+	9	0
	+	20	40
	+	36	0
	+	35	2

> ~/learn2prog/c4prj2_input/input.
	*	1725523034	0
	"	1	0

> ~/learn2prog/c4prj2_input/README
	*	1725507786	0
	"	38	0

> ~/learn2prog/c4prj1_deck/deck.c
	*	1725507156	0
	"	42	4
	^	89	1
	.	42	0
	+	2	0
	+	89	0
	+	42	0

> ~/learn2prog/c4prj1_deck/eval.c
	*	1725506876	0
	"	318	0
	^	318	0
	.	317	0
	+	2	0
	+	317	0

> ~/learn2prog/c4prj1_deck/README
	*	1725503811	0
	"	18	0

> ~/learn2prog/34_put_together/list1a.txt.
	*	1725502182	0
	"	1	0

> ~/learn2prog/34_put_together/main.c
	*	1725502155	0
	"	4	13
	^	27	14
	.	27	13
	+	1	0
	+	1	21
	+	1	37
	+	1	38
	+	1	18
	+	1	23
	+	1	0
	+	1	5
	+	1	26
	+	1	30
	+	1	78
	+	1	67
	+	1	13
	+	1	12
	+	1	20
	+	1	1
	+	1	0
	+	1	18
	+	1	13
	+	1	0
	+	1	22
	+	1	4
	+	1	0
	+	2	0
	+	67	1
	+	29	0
	+	28	0
	+	26	14
	+	48	8
	+	51	23
	+	28	0
	+	27	13

> ~/learn2prog/34_put_together/main.
	*	1725502120	0
	"	1	0

> ~/learn2prog/34_put_together/kv.c
	*	1725501885	0
	"	37	0

> ~/learn2prog/34_put_together/counts.c
	*	1725501122	0
	"	44	5

> ~/learn2prog/34_put_together/outname.c
	*	1725500825	0
	"	6	7

> ~/learn2prog/34_put_together/outname.
	*	1725500815	0
	"	1	0

> ~/learn2prog/34_put_together/kvs1.txt
	*	1725500387	0
	"	1	0

> ~/learn2prog/34_put_together/README
	*	1725499857	0
	"	1	0

> ~/learn2prog/33_counts/counts.c
	*	1725499698	0
	"	29	22
	^	29	23
	.	29	22
	+	2	0
	+	51	1
	+	29	22

> ~/learn2prog/33_counts/counts.h
	*	1725499473	0
	"	25	0
	^	25	0
	.	24	6
	+	1	20
	+	24	6

> ~/learn2prog/33_counts/README
	*	1725498325	0
	"	18	0

> ~/learn2prog/32_kvs/kv.c
	*	1725456107	0
	"	33	12
	^	33	13
	.	33	12
	+	2	0
	+	64	1
	+	31	14
	+	32	3
	+	53	0
	+	52	0
	+	52	36
	+	52	63
	+	52	0
	+	51	84
	+	33	12

> ~/learn2prog/32_kvs/kv.h
	*	1725454877	0
	"	30	0
	^	30	0
	.	29	6
	+	1	16
	+	29	6

> ~/learn2prog/32_kvs/README
	*	1725450584	0
	"	1	0

> ~/learn2prog/31_minesweeper/minesweeper.c
	*	1725352485	0
	"	123	12
	^	123	13
	.	123	13
	+	45	5
	+	46	32
	+	123	13

> ~/learn2prog/31_minesweeper/minesweeper
	*	1725352241	0
	"	1	0

> ~/learn2prog/31_minesweeper/README
	*	1725350291	0
	"	79	0

> ~/learn2prog/30_sort_lines/sortLines.c
	*	1725349882	0
	"	36	13
	^	34	0
	.	36	13
	+	41	0
	+	24	17
	+	25	10
	+	23	17
	+	24	11
	+	40	0
	+	19	6
	+	20	18
	+	21	9
	+	19	16
	+	30	2
	+	27	25
	+	30	0
	+	30	33
	+	20	17
	+	22	18
	+	19	4
	+	40	8
	+	31	11
	+	40	0
	+	45	0
	+	46	2
	+	47	0
	+	45	19
	+	45	1
	+	33	8
	+	17	2
	+	17	26
	+	17	19
	+	45	0
	+	46	21
	+	50	38
	+	55	0
	+	53	21
	+	45	0
	+	43	0
	+	40	0
	+	30	0
	+	30	18
	+	25	36
	+	27	21
	+	54	4
	+	17	16
	+	51	23
	+	30	0
	+	29	7
	+	28	27
	+	17	0
	+	35	0
	+	17	0
	+	35	14
	+	39	10
	+	46	7
	+	47	0
	+	56	0
	+	32	0
	+	34	0
	+	37	8
	+	36	13

> ~/learn2prog/30_sort_lines/README
	*	1725349868	0
	"	18	0

> ~/learn2prog/30_sort_lines/input.txt
	*	1725349822	0
	"	4	0
	.	5	0
	+	4	3
	+	5	0

> ~/learn2prog/30_sort_lines/s
	*	1725349156	0
	"	1	0

> ~/learn2prog/30_sort_lines/sortLines
	*	1725348354	0
	"	1	0

> ~/learn2prog/30_sort_lines/#sortLines.c#
	*	1725347129	0
	"	21	0

> ~/learn2prog/29_outname/outname.c
	*	1725335763	0
	"	10	32
	^	10	33
	.	10	33
	+	12	0
	+	8	77
	+	9	34
	+	10	29
	+	9	0
	+	11	22
	+	8	47
	+	9	14
	+	10	14
	+	9	33
	+	8	64
	+	11	11
	+	10	36
	+	10	33

> ~/learn2prog/29_outname/README
	*	1725335748	0
	"	2	0

> ~/learn2prog/28_fix_vg_encr/encrypt.c
	*	1725335536	0
	"	48	19
	^	7	20
	.	7	19
	+	48	19
	+	58	9
	+	25	12
	+	58	0
	+	44	49
	+	7	19
	+	8	14
	+	7	19

> ~/learn2prog/27_matrix_input/rotateMatrix.c
	*	1725243196	0
	"	63	4
	^	63	5
	.	63	4
	+	63	4

> ~/learn2prog/27_matrix_input/rotateMartix.c
	*	1725242795	0
	"	72	0
	^	74	0
	.	73	1
	+	73	1

> ~/learn2prog/26_tests_matrix_input/tests.txt
	*	1725242339	0
	"	11	4
	^	11	5
	.	11	4
	+	1	9
	+	1	8
	+	1	0
	+	3	0
	+	4	0
	+	3	8
	+	4	10
	+	4	4
	+	4	9
	+	4	23
	+	4	22
	+	4	20
	+	4	0
	+	4	4
	+	4	16
	+	4	4
	+	4	18
	+	4	4
	+	8	4
	+	12	9
	+	9	4
	+	3	12
	+	4	0
	+	3	27
	+	13	20
	+	14	0
	+	15	0
	+	14	2
	+	15	0
	+	17	0
	+	17	22
	+	17	19
	+	11	4
	+	3	0
	+	2	3
	+	16	22
	+	3	16
	+	4	4
	+	6	4
	+	9	4
	+	10	6
	+	11	4

> ~/learn2prog/26_tests_matrix_input/E.txt
	*	1725242325	0
	"	1	0
	^	1	20
	.	1	0
	+	1	20
	+	1	36
	+	1	0

> ~/learn2prog/26_tests_matrix_input/EOF.txt
	*	1725242219	0
	"	1	0
	.	1	0
	+	1	9
	+	1	36
	+	1	22
	+	1	0
	+	1	38
	+	1	31
	+	1	0

> ~/learn2prog/26_tests_matrix_input/4.txt
	*	1725242057	0
	"	9	0
	.	10	0
	+	10	30
	+	10	0
	+	1	0
	+	10	0

> ~/learn2prog/26_tests_matrix_input/3.txt
	*	1725242042	0
	"	11	0
	^	11	1
	.	11	0
	+	3	3
	+	11	0

> ~/learn2prog/26_tests_matrix_input/2.txt
	*	1725242007	0
	"	2	10
	^	2	11
	.	2	10
	+	2	10

> ~/learn2prog/26_tests_matrix_input/1.txt
	*	1725241993	0
	"	1	0
	^	1	20
	.	1	0
	+	1	19
	+	1	36
	+	1	0

> ~/learn2prog/26_tests_matrix_input/0.txt
	*	1725241927	0
	"	10	9
	^	10	0
	.	10	0
	+	1	9
	+	2	0
	+	3	0
	+	4	0
	+	5	0
	+	6	0
	+	7	0
	+	8	0
	+	9	0
	+	10	0

> ~/learn2prog/26_tests_matrix_input/7.txt
	*	1725241539	0
	"	10	8
	^	10	0
	.	10	0
	+	4	8
	+	5	0
	+	6	0
	+	7	0
	+	8	0
	+	9	0
	+	10	0

> ~/learn2prog/26_tests_matrix_input/tests.t
	*	1725241457	0
	"	1	0

> ~/learn2prog/26_tests_matrix_input/6.txt
	*	1725241412	0
	"	10	10
	^	10	0
	.	10	0
	+	1	11
	+	2	10
	+	3	0
	+	4	0
	+	5	0
	+	6	0
	+	7	0
	+	8	0
	+	9	0
	+	10	0

> ~/learn2prog/26_tests_matrix_input/5.txt
	*	1725241379	0
	"	9	9
	.	10	0
	+	1	9
	+	2	0
	+	3	0
	+	4	0
	+	3	0
	+	4	0
	+	5	0
	+	6	0
	+	7	0
	+	8	0
	+	9	0
	+	10	0

> ~/learn2prog/26_tests_matrix_input/sample.txt
	*	1725240426	0
	"	1	0

> ~/learn2prog/26_tests_matrix_input/row_lower_than_10.txt
	*	1725240127	0
	"	8	0
	.	9	0
	+	9	0

> ~/learn2prog/26_tests_matrix_input/col_lower_than_10.txt
	*	1725240111	0
	"	2	0
	.	2	0
	+	2	0

> ~/learn2prog/26_tests_matrix_input/row_greater_than_10.txt
	*	1725240026	0
	"	1	0

> ~/learn2prog/26_tests_matrix_input/col_greater_than_10.txt
	*	1725240017	0
	"	1	0

> ~/learn2prog/26_tests_matrix_input/run_all.sh
	*	1725204879	0
	"	2	0
	^	2	0
	.	2	0
	+	31	3
	+	2	0

> ~/learn2prog/22_tests_power/run_all.sh
	*	1725204859	0
	"	2	0

> ~/learn2prog/26_tests_matrix_input/1.txxt
	*	1725202186	0
	"	1	0

> ~/learn2prog/26_tests_matrix_input/README
	*	1725180535	0
	"	20	20
	^	24	120
	.	24	119
	+	24	119

> ~/learn2prog/25_break_encr/breaker.c
	*	1725180239	0
	"	6	0
	^	50	0
	.	49	1
	+	1	18
	+	1	19
	+	1	20
	+	49	1

> ~/learn2prog/25_break_encr/breaker
	*	1725180131	0
	"	1	0

> ~/learn2prog/25_break_encr/Makefile
	*	1725178846	0
	"	2	5
	^	2	8
	.	2	5
	+	2	5

> ~/learn2prog/25_break_encr/input.txt
	*	1725177940	0
	"	1	17
	^	1	18
	.	1	17
	+	1	17

> ~/learn2prog/c3prj2_eval/test.txt
	*	1724579082	0
	"	1	41
	^	1	42
	.	1	41
	+	1	39
	+	1	41

> ~/learn2prog/c3prj2_eval/grade.txt
	*	1724578401	0
	"	98	27
	^	21	0

> ~/learn2prog/c3prj1_deck/deck.c
	*	1724577377	0
	"	8	2
	.	8	0
	+	39	0
	+	8	13
	+	8	0

> ~/learn2prog/c2prj1_cards/cards.c
	*	1724576461	0
	"	63	16
	^	63	17
	.	63	16
	+	63	16

> ~/learn2prog/c3prj1_deck/README
	*	1724576408	0
	"	72	3

> ~/learn2prog/c2prj1_cards/README
	*	1724576375	0
	"	102	0

> ~/learn2prog/c3prj2_eval/README
	*	1724569708	0
	"	332	0

> ~/learn2prog/23_power_rec/Makefile
	*	1724469929	0
	"	2	32
	^	2	33
	.	2	32
	+	1	0
	+	1	27
	+	2	32

> ~/learn2prog/22_tests_power/test-power.c
	*	1724469505	0
	"	9	0
	^	9	0
	.	8	1
	+	10	11
	+	33	1
	+	11	0
	+	8	1

> ~/learn2prog/22_tests_power/test-power.
	*	1724469357	0
	"	1	0

> ~/learn2prog/22_tests_power/test-power
	*	1724469349	0
	"	1	0

> ~/learn2prog/18_reverse_str/answer.txt
	*	1724382997	0
	"	1	0

> ~/learn2prog/17_read_arr2/Makefile
	*	1724382396	0
	"	2	18
	^	2	19
	.	2	18
	+	2	18

> ~/learn2prog/15_tests_subseq/test-subseq
	*	1724318146	0
	"	2	74
	.	2	0
	+	2	0

> ~/learn2prog/15_tests_subseq/test-subseq.c
	*	1724318028	0
	"	15	0
	.	15	0
	+	1	9
	+	1	8
	+	1	21
	+	1	14
	+	1	18
	+	1	0
	+	26	1
	+	24	0
	+	15	0

> ~/learn2prog/15_tests_subseq/test
	*	1724317344	0
	"	1	0

> ~/learn2prog/12_read_ptr2/answer.txt
	*	1724213190	0
	"	6	5
	.	6	5
	+	6	5

> ~/learn2prog/12_read_ptr2/MakeFile
	*	1724213081	0
	"	2	18
	^	2	19
	.	2	18
	+	2	18

> ~/learn2prog/11_read_ptr1/answer.txt
	*	1724208098	0
	"	1	0
	^	4	21
	.	1	0
	+	1	27
	+	4	20
	+	1	0
